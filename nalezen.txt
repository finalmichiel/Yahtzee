function rollDice(numRolls) {
  // Simulate rolling a die `numRolls` times
  const rolls = [];
  for (let i = 0; i < numRolls; i++) {
    rolls.push(Math.floor(Math.random() * 6) + 1); // Rolls a number between 1 and 6
  }
  return rolls;
}

function checkDice(rolls) {
  // Create an object to store the frequency of each number
  const frequency = {};

  // Count how many times each number appears
  for (let i = 0; i < rolls.length; i++) {
    const value = rolls[i];
    frequency[value] = (frequency[value] || 0) + 1;
  }

  // Check for numbers that appear 3, 4, or 5 times
  const results = [];
  for (let key in frequency) {
    const count = frequency[key];
    if (count === 3 || count === 4 || count === 5) {
      const product = count * key; // Multiply the count by the value of the die
      results.push({ number: key, count, product });
    }
  }

  return results;
}

// Example usage:
const rolls = rollDice(5);
console.log('Rolls:', rolls);
const results = checkDice(rolls);

if (results.length > 0) {
  console.log('Numbers appearing 3, 4, or 5 times:');
  results.forEach(result => {
    console.log(`Number ${result.number} appeared ${result.count} times, product: ${result.product}`);
  });
} else {
  console.log('No number appeared 3, 4, or 5 times.');
}


Voor als het niet mocht lukken:

function smallStreet() {
    // Sort the diceTray array
    diceTray.sort((a, b) => a - b);

    let sortedDice = [];

        for (let i = 0; i < diceTray.length; i++) {
        
        if (sortedDice.indexOf(diceTray[i]) === -1) {
            sortedDice.push(diceTray[i]);
        }
    }

    // Check if there is a small street (4 consecutive numbers)
    for (let i = 0; i < sortedDice.length - 3; i++) {
        if (sortedDice[i] + 1 === sortedDice[i + 1] &&
            sortedDice[i] + 2 === sortedDice[i + 2] &&
            sortedDice[i] + 3 === sortedDice[i + 3]) {
            return true; // A small street is found
        }
    }

    return false; // No small street found
}
function largeStreet() {
    // Sort the diceTray array
    diceTray.sort((a, b) => a - b);

    // Create a new array to store unique values
    let sortedDice = [];

    // Loop through diceTray and add only unique values to sortedDice
    for (let i = 0; i < diceTray.length; i++) {
        // Only add the value if it's not already in the sortedDice array
        if (sortedDice.indexOf(diceTray[i]) === -1) {
            sortedDice.push(diceTray[i]);
        }
    }

    // Check if there is a large street (5 consecutive numbers)
    for (let i = 0; i < sortedDice.length - 4; i++) {
        // If the current dice number plus 4 is the next value, it's a large street
        if (sortedDice[i] + 1 === sortedDice[i + 1] &&
            sortedDice[i] + 2 === sortedDice[i + 2] &&
            sortedDice[i] + 3 === sortedDice[i + 3] &&
            sortedDice[i] + 4 === sortedDice[i + 4]) {
            return true; // A large street is found
        }
    }

    return false; // No large street found
}
